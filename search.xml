<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NOI2023 省选 游记</title>
      <link href="//post/2023-sheng-xuan-you-ji/"/>
      <url>//post/2023-sheng-xuan-you-ji/</url>
      
        <content type="html"><![CDATA[<p>本人初中生，就是去见见世面<img src="https://xn--wcs.tk/6" alt=""></p><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>开车去考场，一个小时的车程中，我敲了一遍 exgcd、dijkstra、SPFA 和线段树的板子。</p><p>进考场，先读题。<del>为什么是 NOI2022省选 啊</del>。</p><p>发现在车上敲的板子一个都没有用上（虽然 T1 似乎可以用线段树做，但我没用）。</p><p>T1，首先想到的思路是差分。将每一个区间都加一，从起点向左、右遍历，直到有 $0$ 或遍历完为止。如果遍历到的点是某一铁路的端点，则根据这个点在起点的哪侧，来判断是否可以走到。</p><p>然后大样例全过了，造了个小样例把自己 hack 了：<code>4 2 1 1 2 3 4</code>。</p><p>没错这是我赛场上造出来的数据，<del>下午把它发到洛谷上，竟然传遍了洛谷。</del></p><p>然后考虑一边差分一边统计答案。记录每个点是多少条铁路的左端点，多少条铁路的右端点即可。</p><p>赛后发现正常差分也可以做。但是要<code>k[l+1]++;k[r-1]--;</code>。（似乎是这样的）。</p><p>反正 +100pts。</p><p>再看 T2，没思路，想要做给定的图为树的点。</p><p>赛场上脑残，读错题了，推出来树的答案是 $0$，结果直接输出<code>0</code>。</p><p><del>T2 具体得多少分要看 CCF 数据有多水</del>，大概率0分。</p><p>再看 T3，发现 $sid=6$ 的点可做。</p><p>这三个测试点为链，且没有修改操作。从 $1$ 到 $n$ 遍历，向优先队列加入这个点上所有员工的能力，然后取出最大值即可。+6pts。</p><p>其它点实在是想不出来了，还剩一个小时，摆烂了。</p><p><del>在比赛结束前的一个小时中，我闲得没事干，把电脑里的所有应用程序放在了一个文件夹里，还在桌面上建了好多个新文件夹……</del></p><p>Day1 估分 106 pts，菜（）</p><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p><del>诶文件标题变回 NOI2023 了。</del></p><p>看 T1，测试点 $1 \sim 4$ 数据水，先切了，+20pts。</p><p>然后看到了测试点 $7 \sim 9$，这里 $m=1$。黑子每次只能向上走。用四进制枚举，四个状态分别表示第一个红字向上/向下走、第二个红子向上/向下走。+15pts。</p><p>测试点 $5 \sim 6$ 猜了猜结论，但是不太确定，就去看 T2。</p><p>先看到了特殊性质 A，这些测试点的答案不是<code>0</code>就是<code>-1</code>。</p><p>从 $T_i$ 中取出的元素不能重复，于是想到了，如果 $|T_i|=1$，那么这个数必须在这里选。如果集合 $\{x,y\}$ 出现了两次，则 $x,y$ 必须要选。</p><p>然后开始写代码。写了一大顿，样例过不去。然后我甚至想到了判断二分图，还是不行。</p><p>写了一大顿，改了一大顿，发现特殊性质 B 的答案不可能是<code>-1</code>，从 $T_i$ 中取出的数字，只有两种情况。于是我就开始写这些测试点。</p><p>对于 $1 \le i \le n$ ，判断从 $S_i$ 中取数，只能与从 $T_i$ 中取数的第一种情况相等的个数，只能与从 $T_i$ 中取数的第二种情况相等的个数，以及可以和两种情况都相等的个数。最后讨论一下即可。最终测了一下大样例，看了一小下，似乎过了。但比赛此时结束了，也不能再调了。大概可以+16pts。</p><p>比赛结束了。</p><p>Day2 估分 51pts，非常寄。</p><p>总分估分 106pts+51pts=157pts，等官方成绩。</p><hr><p>upd：官方成绩出来了，比估分低一些，又挂分了（</p>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态规划 学习笔记</title>
      <link href="//post/dp/"/>
      <url>//post/dp/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>通过把原问题分解成若干个子问题（所有这些问题在一定意 义上答案固定），再利用已知的子问题答案依次计算未知问题的答案，最终得到原问题答案的方式，称之为动态规划（Dynamic Programming，简称 DP）。</p><p>动态规划利用若干条信息来标识一个状态，按照一定的顺序 依次计算这些状态对应的答案，每一个状态的计算都利用上之前 计算过的状态（类似递推的由已知得到未知），由此降低问题本身的复杂程度。</p><p>动态规划的状态可以笼统的解释为“问题所在的局面”。状态的定义是明确的，具有<strong>无后效性</strong>以及<strong>最优子结构</strong>性质。</p><h2 id="Luogu-P2842-纸币问题-1"><a href="#Luogu-P2842-纸币问题-1" class="headerlink" title="Luogu P2842 纸币问题 1"></a><a href="https://www.luogu.com.cn/problem/P2842">Luogu P2842 纸币问题 1</a></h2><p>用 $f_i$ 表示总金额为 $i$ 时最少用多少张纸币。</p><p>如果 $i-a_j \ge 0$，则可以先用 $f_{i-a_j}$ 张纸币凑齐 $i-a_j$ 元，再用一张 $a_j$ 元的纸币，即可凑齐 $i$ 元。</p><p>可以得到状态转移方程：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i-a[j]&gt;=<span class="number">0</span>) f[i]=<span class="built_in">min</span>(f[i],f[i-a[j]]+<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="Luogu-P2840-纸币问题-2"><a href="#Luogu-P2840-纸币问题-2" class="headerlink" title="Luogu P2840 纸币问题 2"></a><a href="https://www.luogu.com.cn/problem/P2840">Luogu P2840 纸币问题 2</a></h2><p>用 $f_i$ 表示总金额为 $i$ 时有多少种方式。</p><p>如果 $i-a_j \ge 0$，则有 $f_{i-a_j}$ 种方式凑齐 $i-a_j$ 元，再用一张 $a_j$ 元的纸币来凑齐 $i$ 元。</p><p>可以得到状态转移方程：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=w;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        <span class="keyword">if</span>(i-a[j]&gt;=<span class="number">0</span>) f[i]+=f[i-a[j]],f[i]%=mod;</span><br></pre></td></tr></table></figure><h2 id="Luogu-P2834-纸币问题-3"><a href="#Luogu-P2834-纸币问题-3" class="headerlink" title="Luogu P2834 纸币问题 3"></a><a href="https://www.luogu.com.cn/problem/P2834">Luogu P2834 纸币问题 3</a></h2><p>与上一道题相似，但是要求硬币组合的数量。</p><p>对于上一道题，我们要保证 $f_{i-a_j}$ 是最终答案，因此我们先枚举 $i$ 再枚举 $j$。</p><p>但是这道题，我们要保证 $f_{i-a_j}$ 是由编号为 $1 \sim j-1$ 这几种纸币拼出来的方案数，不能有其它纸币参与。</p><p>因此我们先枚举 $j$ 再枚举 $i$ 即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=w;i++)</span><br><span class="line">        <span class="keyword">if</span>(i-a[j]&gt;=<span class="number">0</span>) f[i]+=f[i-a[j]],f[i]%=mod;</span><br></pre></td></tr></table></figure><h2 id="Luogu-P1216-数字三角形"><a href="#Luogu-P1216-数字三角形" class="headerlink" title="Luogu P1216 数字三角形"></a><a href="https://www.luogu.com.cn/problem/P1216">Luogu P1216 数字三角形</a></h2><p>用 $f_{i,j}$ 记录到达点 $(i,j)$ 处的最大路径。</p><p>而点 $(i,j)$ 可能由 $(i-1,j)$ 或 $(i-1,j-1)$ 直接向下一步走到，于是推出转移方程：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">1</span>][<span class="number">1</span>]=a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++) </span><br><span class="line">        f[i][j]=a[i][j]+<span class="built_in">max</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>],f[i<span class="number">-1</span>][j]);</span><br></pre></td></tr></table></figure><h2 id="Luogu-P1048-采药"><a href="#Luogu-P1048-采药" class="headerlink" title="Luogu P1048 采药"></a><a href="https://www.luogu.com.cn/problem/P1048">Luogu P1048 采药</a></h2><p>01 背包模板题。</p><p>假设 $v_i$ 为物体的体积，$c_i$ 为物体的价值。将这 $n$ 个物体放入一个体积为 $V$ 的背包中。</p><p>假设 $f_{i,j}$ 表示将前 $i$ 个物品放入容量为 $j$ 的背包中，最大价值是多少。</p><p>则有转移方程：</p><script type="math/tex; mode=display">f_{i,j}=\left \{\begin{array}{ll}    \max\{f_{i-1,j-v_i}+c_i,f_{i-1,j}\} & (j\ge v_i)\\    f_{i-1,j} & otherwise\end{array}\right.</script><p>因为有两种选择：选或不选。</p><p>若选第 $i$ 个物体，则前 $i-1$ 个物体体积要小于 $j-w_i$，得出 $f_{i-1,j-v_i}+c_i$。若不选第 $i$ 个物体，则等价于只选前 $i-1$ 个物体，得出 $f_{i-1,j}$。</p><p>看转移方程。第一维都是 $i-1$ ，于是我们想办法将第一维消掉。</p><p>再看第二维，计算 $f_{i,j}$ 时，第二维的值都小于等于 $j$。要想将第一维消掉，则需要保证，在更新 $f_{i,j}$ 时，$f_{i,j-v_i}$ 没有被更新过。</p><p>于是我们可以省掉第一维，然后从大到小遍历 $j$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=V;k&gt;=v[i];j--)</span><br><span class="line">        f[j]=<span class="built_in">max</span>(f[j],f[j-v[i]]+c[i]);</span><br></pre></td></tr></table></figure><h2 id="Luogu-P1616-疯狂的采药"><a href="#Luogu-P1616-疯狂的采药" class="headerlink" title="Luogu P1616 疯狂的采药"></a><a href="https://www.luogu.com.cn/problem/P1616">Luogu P1616 疯狂的采药</a></h2><p>完全背包模板题。</p><p>与上一题相比，这一题每个物品都有无限个。</p><p>上一题倒着遍历，其实还为了保证，更新 $f_i$ 时，$f_{j-v_i}$ 没有将第 $i$ 个物品算进去。因为上一题每件物品只有一个。</p><p>而这道题每个物品有无数个，我们恰好要保证：更新 $f_i$ 时，$f_{j-v_i}$ 已经将第 $i$ 个物品算进去。</p><p>因此正着遍历即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=v[i];k&lt;=V;j++)</span><br><span class="line">        f[j]=<span class="built_in">max</span>(f[j],f[j-v[i]]+c[i]);</span><br></pre></td></tr></table></figure><center> ------待更新------</center>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐几道数据结构好题</title>
      <link href="//post/shu-ju-jie-gou-ha-ti/"/>
      <url>//post/shu-ju-jie-gou-ha-ti/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【置顶】题解</title>
      <link href="//solution/"/>
      <url>//solution/</url>
      
        <content type="html"><![CDATA[<center>目前共计 2 篇题解</center><hr><p><a href="/solution/P1869">P1869 互不侵犯 题解</a> $<del>~</del><del>~</del><del>~</del><del>~</del><del>~</del>~~$<font color="white"><font style="background: #279fff ">　提高+/省选-　</font> 　　<a href="https://www.luogu.com.cn/problem/P1896">题目链接</a></p><p><a href="/solution/P7633">P7633 BRODOVI 题解</a> $<del>~</del><del>~</del><del>~</del><del>~</del><del>~</del>$ <font color="white"><font style="background: #ffc116 ">　普及/提高-　 </font> 　　<a href="https://www.luogu.com.cn/problem/P7633">题目链接</a></p><p><a href="/solution/67633">P6733 「Wdsr-2」间歇泉 题解</a> $<del>~</del><del>~</del>~~~$<font color="white"><font style="background: #52C41A ">　普及+/提高　 </font> 　　<a href="https://www.luogu.com.cn/problem/P6733">题目链接</a></p><p><a href="/solution/CF1015C">CF1015C Songs Compression 题解</a> $<del>~</del>$ <font color="white"><font style="background: #52C41A ">　普及+/提高　 </font> 　　<a href="https://www.luogu.com.cn/problem/CF1015C">题目链接</a></p><p><a href="/solution/CF1762B">CF1762B Make Array Good 题解</a> $<del>~</del><del>~</del>$<font color="white"><font style="background: #777777">　暂无评定　 </font> 　　　<a href="https://www.luogu.com.cn/problem/CF1762B">题目链接</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初级图论</title>
      <link href="//post/chu-ji-tu-lun/"/>
      <url>//post/chu-ji-tu-lun/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><center>前言</center></h2><h3 id="1-图的定义及基本概念"><a href="#1-图的定义及基本概念" class="headerlink" title="1.图的定义及基本概念"></a>1.图的定义及基本概念</h3><p>假设由一个图 $G=(V,E)$，$V$ 是点集，存储了图中所有的点；$E$ 是边集，存储了图中所有的边。</p><p>说白了，你可以将图理解成有几个地点，其中某些地点间有道路连通。而这些道路，可能是单向道，也可能是双向道。这些地点对应图中的点，道路对应图中的边。</p><p>如果每条道路都是单向道，即边都是单向的，那么称这张图为有向图。否则称这张图为无向图。当然，在有向图中，可能存在两点间有两条边，使两点可以互相连通。</p><ul><li><p>有时两点间有多条边连接，被称为<strong>重边</strong>。</p></li><li><p>有时存在从一个点到它自己的边，称为<strong>自环</strong>。</p></li><li><p>每条边可能会对应一个数值，称为<strong>边权</strong>。</p></li><li><p>每个点可能会对应一个数值，成为<strong>点权</strong>。</p></li></ul><p>对于无向图：</p><ul><li>一个点所连边的数量叫做<strong>度</strong>。</li></ul><p>对于有向图：</p><ul><li><p>通向这个点的边的数量叫做<strong>入度</strong>。</p></li><li><p>从这个点出发的边的数量叫做<strong>出度</strong>。</p></li></ul><p>例如，有如下两张图。左图为无向图，右图为有向图。</p><p>求左图点 $1$ 的度，右图点 $2$ 的入度、点 $1$ 的出度。</p><p>答案：<font color="#279fff"><font style="background: #279fff ">（1）3，（2）2，（3）2</font> &lt;/font&gt;（点击 ctrl+a 查看答案）</p><p><img src="https://fuqirui.gitee.io/files/96n0e56359.png" alt=""></p><h3 id="2-本文会用到的一些术语"><a href="#2-本文会用到的一些术语" class="headerlink" title="2.本文会用到的一些术语"></a>2.本文会用到的一些术语</h3><p>本文中，我们会用 $u\to(v,c)$ 表示一条从 $u$ 通向 $v$ 的边，权值为 $c$。</p><h2 id="一、常用的存图方式"><a href="#一、常用的存图方式" class="headerlink" title="一、常用的存图方式"></a><center>一、常用的存图方式</center></h2><h3 id="1-邻接矩阵"><a href="#1-邻接矩阵" class="headerlink" title="1.邻接矩阵"></a>1.邻接矩阵</h3><p>一个二位数组 $g$，其中 $g_{i,j}$ 表示从 $i$ 到 $j$ 的边权。</p><p>空间复杂度 $O(n^2)$。</p><p>缺点是空间复杂度极大，不能存储重边。但是，要查询一条从 $i$ 通向 $j$ 的边，时间复杂度为 $O(1)$，更优于其它方式。</p><h3 id="2-vector"><a href="#2-vector" class="headerlink" title="2. vector"></a>2. vector</h3><p>通常是 <code>vector&lt;pair&lt;int,int&gt; &gt; g[N]</code> 的形式。其中 $g_i$ 存储了 $i$ 点的所有出边。</p><p>空间复杂度 $O(N)$。</p><h3 id="3-邻接表"><a href="#3-邻接表" class="headerlink" title="3. 邻接表"></a>3. 邻接表</h3><p>空间复杂度为$O(n)$。但邻接表只用几个静态数组便可以存图，稍优于 vector。且邻接表更便于查询反向边。</p><p>$head_i$ 存储 $i$ 点的所有出边中，存储位置做靠右的那一条。</p><p>$nxt_i$ 表示与 $i$ 边相同入点的，存储在它左侧的，最靠近它的边（如果不存在，则 $nxt_i=1$）。</p><p>$to_i$ 表示 $i$ 边的出点。</p><p>$qz_i$ 表示 $i$ 边的权值。</p><p>每次添加一条边时，将此边的 $nxt$ 值指向这个入点的上一条边，并将此边入点的 $head$ 值设为此边。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> head[N],to[M],qz[M],nxt[M];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span><span class="comment">//添加一条边：从x通向y，权值为z</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    to[cnt]=y;<span class="comment">//将cnt边的出点设为y</span></span><br><span class="line">    qz[cnt]=z;<span class="comment">//将cnt边的权值设为z</span></span><br><span class="line">    nxt[cnt]=head[x];<span class="comment">//把nxt[cnt]指向上一条x的出边</span></span><br><span class="line">    head[x]=cnt;<span class="comment">//将cnt暂时设为x的出边中，存储位置最靠右的边</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历i点的所有出边（相当于从右向左将i点的出边扫了一遍）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=head[i];j;j=nxt[i]) <span class="comment">//出边通向的点：to[j]，出边的权值：qz[j]</span></span><br></pre></td></tr></table></figure><hr><h2 id="二、单源最短路径问题"><a href="#二、单源最短路径问题" class="headerlink" title="二、单源最短路径问题"></a><center>二、单源最短路径问题</center></h2><p>单元最短路径问题（简称 SSSP）。</p><p>顾名思义，此类问题给出一个起点，求出它到所有点的最短路径。</p><h3 id="1、Dijkstra-算法"><a href="#1、Dijkstra-算法" class="headerlink" title="1、Dijkstra 算法"></a>1、Dijkstra 算法</h3><p>Dijkstra，基于贪心的思想，可用来解决单源最短路径问题。但前提是所有边权都非负。</p><h4 id="·-大致思路"><a href="#·-大致思路" class="headerlink" title="· 大致思路"></a>· 大致思路</h4><ol><li>创建 $dis$ 数组，其中 $dis_i$ 表示从起点 $s$ 到点 $i$ 的最短距离。</li><li>维护两个顶点集合 $S$ 与 $Q$。其中 $S$ 中点的 $dis$ 值已经为最终值，无法继续修改。</li><li>将原点 $s$ 的 $dis$ 值设为 $0$，其他点的 $dis$ 值设为 $+\infty$。</li><li>取出 $Q$ 集合中 $dis$ 值最小的点 $u$，将它放入 $S$ 中，并遍历这个点所有的出边 $p \to (q,c)$，将 $q$ 的 $dis$ 值更新为 $\max(dis_q,dis_p+c)$。</li><li>重复执行步骤 4，直到 $Q$ 集合为空。</li></ol><p>下面这张动图完美地解释了 Dijkstra 算法的执行过程（$0$ 为起点，圆圈里的数字为点的编号，红色的数字表示 $dis$ 值）：</p><p><img src="https://fuqirui.gitee.io/files/image_gif.gif" alt=""></p><p>（图片来源于网络）</p><h4 id="关于-Dijkstra-算法的正确性"><a href="#关于-Dijkstra-算法的正确性" class="headerlink" title="关于 Dijkstra 算法的正确性"></a>关于 Dijkstra 算法的正确性</h4><p>显然，每次从集合 $Q$ 中取出的点的 $dis$ 值只要不会再次被更新即可。 </p><p>假设集合 $Q$ 中 $dis$ 值最小的点为 $p$。现在将它从 $Q$ 中取出。</p><p>集合 $S$ 中的每一个点都曾用来更新过 $p$ 点的 $dis$ 值，因此 $p$ 点的 $dis$ 值不会再变小。</p><p>假设集合 $Q$ 中的点 $q$ 与点 $p$ 相连，因为 $dis_p\le dis_q$，那么当边权非负时， $dis_q$ 加上边权也一定大于等于 $dis_p$。</p><p>因此 $p$ 的 $dis$ 值不会再被更新。</p><p>而在上面的证明过程中，用到了边权非负的条件。显然，边权为负数时，证明不成立。因此，Dijkstra 只能处理边权全部非负的图。</p><h4 id="Dijkstra-的代码实现以及优化"><a href="#Dijkstra-的代码实现以及优化" class="headerlink" title="Dijkstra 的代码实现以及优化"></a>Dijkstra 的代码实现以及优化</h4><p>按照上文提到的大致思路模拟即可。代码中使用了 $vis$ 数组。如果 $vis_p$ 为假，则 $p$ 点在 $Q$ 集合中，否则 $p$  点在 $S$ 集合中。</p><p><a href="https://www.luogu.com.cn/problem/P3371">洛谷 P3371</a> 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 10010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 500010</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,s;</span><br><span class="line"><span class="type">int</span> head[N],to[M],qz[M],nxt[M];</span><br><span class="line"><span class="type">int</span> dis[N];<span class="type">bool</span> vis[N];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 2147483647</span></span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    to[cnt]=y;qz[cnt]=z;nxt[cnt]=head[x];head[x]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dij</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dis[i]=inf;</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=<span class="number">1</span>,minn=inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[j]&amp;&amp;dis[j]&lt;minn) u=j,minn=dis[j];<span class="comment">//找到 Q 集合中 dis 值最小的点</span></span><br><span class="line">        vis[u]=<span class="number">1</span>;<span class="comment">//将它放入 S 集合</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=head[u];j;j=nxt[j])<span class="comment">//遍历 u 点的所有出边</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=to[j],c=qz[j];<span class="comment">//这条边是 u-&gt;(v,c)</span></span><br><span class="line">            dis[v]=<span class="built_in">min</span>(dis[v],dis[u]+c);<span class="comment">//更新 v 点的 dis 值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u,v,c;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add_edge</span>(u,v,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dij</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cout&lt;&lt;dis[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设 $n$ 为点数，$m$ 为边数。</p><p>在 $\operatorname{dij}$ 函数中，每一次的外层循环，会将一个点放入 $S$ 集合中。所以，$n$ 次循环后，所有的点都会在 $S$ 集合中。循环中“找到 $Q$ 集合中 $dis$ 值最小的点”这个过程的时间复杂度是 $O(n)$，所以总体时间复杂度为 $O(n^2)$。在从 $Q$ 集合中取出每个点时，遍历了这个点的所有出边，相当于在循环过程中遍历了所有的边。所以严格来说，时间复杂度为 $\Theta(n^2+m)$。</p><p>这个时间复杂度非常不理想，考虑对它进行优化。而优化的入手点，便是“找到 $Q$ 集合中 $dis$ 值最小的点”这个过程。</p><p>可以使用 STL 中的优先队列（priority_queue），每当更新一个点的 $dis$ 值时，就将它的 $dis$ 值放入到队列中。显然，从队列取出的值，一定是 $Q$ 集合中 $dis$ 的最小值。</p><p>我们要这样使用优先队列，使其成为小根堆：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> dis,p;<span class="comment">//dis表示这个点的dis值，p表示这个点的编号</span></span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> _dis,<span class="type">int</span> _p)&#123;dis=_dis,p=_p;&#125;<span class="comment">//构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(node a,node b)</span></span>&#123;<span class="keyword">return</span> a.dis&gt;b.dis;&#125;<span class="comment">//cmp函数，使其成为小根堆</span></span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node,vector&lt;node&gt;,cmp&gt; Q;<span class="comment">//定义优先队列</span></span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P4779">洛谷 P4779</a> 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 200010</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> dis,p;<span class="comment">//dis 表示这个点的 dis 值，p 表示这个点的编号</span></span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> _dis,<span class="type">int</span> _p)&#123;dis=_dis,p=_p;&#125;<span class="comment">//构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(node a,node b)</span></span>&#123;<span class="keyword">return</span> a.dis&gt;b.dis;&#125;<span class="comment">//cmp 函数，使其成为小根堆</span></span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node,vector&lt;node&gt;,cmp&gt; Q;<span class="comment">//定义优先队列</span></span><br><span class="line"><span class="type">int</span> n,m,s;</span><br><span class="line"><span class="type">int</span> head[N],to[M],qz[M],nxt[M];</span><br><span class="line"><span class="type">int</span> dis[N];<span class="type">bool</span> vis[N];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 2147483647</span></span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    to[cnt]=y;qz[cnt]=z;nxt[cnt]=head[x];head[x]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dij</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dis[i]=inf;</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    Q.<span class="built_in">push</span>(<span class="built_in">node</span>(<span class="number">0</span>,s));<span class="comment">//先将 dis 值为 0 的起点放入队列中</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node t=Q.<span class="built_in">top</span>();Q.<span class="built_in">pop</span>();<span class="comment">//取出队列中的元素</span></span><br><span class="line">        <span class="type">int</span> u=t.p;<span class="comment">//u 为 Q 集合中 dis 值最小的点</span></span><br><span class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;<span class="comment">//判断 u 是否在 Q 集合中</span></span><br><span class="line">        vis[u]=<span class="number">1</span>;<span class="comment">//将 u 点放入 S 集合中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=head[u];j;j=nxt[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=to[j],c=qz[j];</span><br><span class="line">            <span class="keyword">if</span>(dis[u]+c&lt;dis[v])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v]=dis[u]+c;</span><br><span class="line">                Q.<span class="built_in">push</span>(<span class="built_in">node</span>(dis[v],v));<span class="comment">//将 dis 值为 dis[v] 的 v 点放入队列</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u,v,c;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add_edge</span>(u,v,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dij</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cout&lt;&lt;dis[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堆优化 dijkstra 的时间复杂度为 $O(m\log n)$。</p><center>--------待更新--------</center>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵幂求和</title>
      <link href="//post/ju-zhen-mi-qiu-he/"/>
      <url>//post/ju-zhen-mi-qiu-he/</url>
      
        <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定矩阵 $A$，求 $A+A^2+A^3+…+A^k$ 中每一个数字对 $p$ 取模的结果。</p><p>$n \le 30,k \le 10^9,p \le 10^4$。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先把矩阵乘法、加法、快速幂写出来（不做讲解）。</p><p>然后写一个函数 $f(x)$，返回值为 $A+A^2+A^3+…+A^x$。</p><p>先用 $f(\lfloor x/2 \rfloor)$ 把 $A+A^2+A^3+…+A^{\lfloor x/2 \rfloor}$ 求出来。</p><p>假设 $res = f(\lfloor x/2 \rfloor)$，那么</p><p>$\, \, \, \, \, \, \, \, res \times A^{\lfloor x/2 \rfloor}$</p><p>$=(A+A^2+A^3+…+A^{\lfloor x/2 \rfloor}) \times A^{\lfloor x/2 \rfloor}$</p><p>$=A \times A^{\lfloor x/2 \rfloor}+A^2 \times A^{\lfloor x/2 \rfloor}+A^3 \times A^{\lfloor x/2 \rfloor}+…+A^{\lfloor x/2 \rfloor} \times A^{\lfloor x/2 \rfloor}$</p><p>$=A^{ {\lfloor x/2 \rfloor}+1}+A^{ {\lfloor x/2 \rfloor}+2}+A^{ {\lfloor x/2 \rfloor}+3}+…+A^{ {\lfloor x/2 \rfloor}+{\lfloor x/2 \rfloor} }$</p><p>这样就可以得出：</p><p>$\, \, \, \, \, \, \, \, res+res \times A^{\lfloor x/2 \rfloor}$</p><p>$=(A+A^2+A^3+…+A^{\lfloor x/2 \rfloor})+(A^{ {\lfloor x/2 \rfloor}+1}+A^{ {\lfloor x/2 \rfloor}+2}+A^{ {\lfloor x/2 \rfloor}+3}+…+A^{ {\lfloor x/2 \rfloor}+{\lfloor x/2 \rfloor} })$</p><p>$=A+A^2+A^3+…+A^{ {\lfloor x/2 \rfloor\times 2} }$</p><p>那么，当 $x$ 为偶数，$\lfloor x/2 \rfloor\times 2=x$，所以 $res+res \times A^{\lfloor x/2 \rfloor}$ 即为答案。</p><p>当  $x$ 为奇数，$\lfloor x/2 \rfloor\times 2=x-1$，所以 $res+res \times A^{\lfloor x/2 \rfloor}=A+A^2+A^3+…+A^{x-1}$，所以这个结果加上 $A^x$ 即为答案。</p><p>因为每次递归只需要求 $f(\lfloor x/2 \rfloor)$，所以时间复杂度为 $\mathcal{O}(\log k)$。</p><p>摆上代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">matrix a;<span class="comment">//输入的矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="function">matrix <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> a;<span class="comment">//当x==1，答案就是a.</span></span><br><span class="line">    matrix res=<span class="built_in">f</span>(x/<span class="number">2</span>);<span class="comment">//求出f(⌊x/2⌋)</span></span><br><span class="line">    <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> res+(<span class="built_in">qpow</span>(a,x/<span class="number">2</span>)*res);<span class="comment">//当x为偶数，答案为res+res×A^⌊x/2⌋</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> res+(res*<span class="built_in">qpow</span>(a,x/<span class="number">2</span>))+<span class="built_in">qpow</span>(a,x);<span class="comment">//否则答案就是 res+res×A^⌊x/2⌋+A^x</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k,p;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line">    matrix <span class="keyword">operator</span> *(matrix b)<span class="comment">//矩阵乘法</span></span><br><span class="line">    &#123;</span><br><span class="line">        matrix res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                res.a[i][j]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    res.a[i][j]=(res.a[i][j]+a[i][k]*b.a[k][j])%p;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    matrix <span class="keyword">operator</span> +(matrix b)<span class="comment">//矩阵加法</span></span><br><span class="line">    &#123;</span><br><span class="line">        matrix res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                res.a[i][j]=(a[i][j]+b.a[i][j])%p;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">matrix <span class="title">qpow</span><span class="params">(matrix a,<span class="type">int</span> k)</span><span class="comment">//快速幂</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    matrix res;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++) res.a[i][j]=<span class="number">0</span>;<span class="comment">//清空</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) res.a[i][i]=<span class="number">1</span>;<span class="comment">//把res变成单位矩阵</span></span><br><span class="line">    <span class="comment">//单位矩阵性质：一个矩阵乘以单位矩阵=这个矩阵。</span></span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=res*a;</span><br><span class="line">        a=a*a;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">matrix a;</span><br><span class="line"></span><br><span class="line"><span class="function">matrix <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> a;<span class="comment">//当x==1，答案就是a.</span></span><br><span class="line">    matrix res=<span class="built_in">f</span>(x/<span class="number">2</span>);<span class="comment">//求出f(⌊x/2⌋)</span></span><br><span class="line">    <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> res+(<span class="built_in">qpow</span>(a,x/<span class="number">2</span>)*res);<span class="comment">//当x为偶数，答案为res+res×A^⌊x/2⌋</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> res+(res*<span class="built_in">qpow</span>(a,x/<span class="number">2</span>))+<span class="built_in">qpow</span>(a,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">matrix ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k&gt;&gt;p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++) cin&gt;&gt;a.a[i][j],a.a[i][j]%=p;<span class="comment">//读入矩阵</span></span><br><span class="line">        </span><br><span class="line">    ans=<span class="built_in">f</span>(k);<span class="comment">//求出这个矩阵</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//直接输出矩阵就可以了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++) cout&lt;&lt;ans.a[i][j]%p&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵 </tag>
            
            <tag> 矩阵快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
